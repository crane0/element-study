// src/index.js 文件由该文件自动生成

var Components = require('../../components.json');
var fs = require('fs');
// 字符串模板库
var render = require('json-templater/string');
// 转大驼峰
var uppercamelcase = require('uppercamelcase');
var path = require('path');
// 为了应对不同系统的换行。参考 https://nodejs.org/api/os.html#oseol
var endOfLine = require('os').EOL;

// 输出路径，对应 src/index.js
var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');

// import 语句模板 name 是大驼峰形式，package 是连字符的形式
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}/index.js\';';
// 对应的是 src/index.js 文件中的 components 变量，注意到也有空格。
// 会在下面的字符串模板中替换 {{install}}
var INSTALL_COMPONENT_TEMPLATE = '  {{name}}';
// src/index.js 文件模板，也就是说，都会在src/index.js 文件中出现，这些是固有代码。
// {{include}}会替代其他的 import 语句
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

{{include}}
import locale from 'element-ui/src/locale';
import CollapseTransition from 'element-ui/src/transitions/collapse-transition';

const components = [
{{install}},
  CollapseTransition
];

const install = function(Vue, opts = {}) {
  locale.use(opts.locale);
  locale.i18n(opts.i18n);

  components.forEach(component => {
    Vue.component(component.name, component);
  });

  Vue.use(InfiniteScroll);
  Vue.use(Loading.directive);

  Vue.prototype.$ELEMENT = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  Vue.prototype.$loading = Loading.service;
  Vue.prototype.$msgbox = MessageBox;
  Vue.prototype.$alert = MessageBox.alert;
  Vue.prototype.$confirm = MessageBox.confirm;
  Vue.prototype.$prompt = MessageBox.prompt;
  Vue.prototype.$notify = Notification;
  Vue.prototype.$message = Message;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  locale: locale.use,
  i18n: locale.i18n,
  install,
  CollapseTransition,
  Loading,
{{list}}
};
`;

// 已经用不到了。没有font属性了
delete Components.font;

var ComponentNames = Object.keys(Components);

// import 语句数组
var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  // 不是下面这几个时，组装成最后的大驼峰组件名。替换模板中的 {{install}}
  if (['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName
      // component: name
    }));
  }
  // 上面的模板字符串中已经有 Loading 了，第71行。
  if (componentName !== 'Loading') listTemplate.push(`  ${componentName}`);
});

// 组装最后的模板
var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join(',' + endOfLine),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',' + endOfLine)
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);

